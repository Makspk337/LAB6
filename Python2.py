import random

sbox = [
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
]

Rcon = [0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36]

def rot_word(word):
    return word[1:] + word[:1]

def sub_word(word):
    return [sbox[b] for b in word]

class AES:
    def __init__(self, key):
        self.Nk = 4
        self.Nr = 10
        self.Nb = 4
        self.key = key
        self.w = []
        self.key_expansion()

    def key_expansion(self):
        self.w = list(self.key)
        for i in range(self.Nk, self.Nb * (self.Nr + 1)):
            temp = self.w[(i-1)*4:(i)*4]
            if i % self.Nk == 0:
                temp = sub_word(rot_word(temp))
                temp[0] ^= Rcon[i // self.Nk]
            word = [a ^ b for a, b in zip(self.w[(i - self.Nk)*4:(i - self.Nk + 1)*4], temp)]
            self.w += word
        for round in range(self.Nr + 1):
            print(f"RoundKey[{round}]: ", end="")
            print(" ".join(f"{b:02x}" for b in self.w[round * 16:(round + 1) * 16]))

    def add_round_key(self, state, round):
        for i in range(16):
            state[i] ^= self.w[round * 16 + i]

    def sub_bytes(self, state):
        for i in range(16):
            state[i] = sbox[state[i]]

    def shift_rows(self, s):
        s[1], s[5], s[9], s[13] = s[5], s[9], s[13], s[1]
        s[2], s[6], s[10], s[14] = s[10], s[14], s[2], s[6]
        s[3], s[7], s[11], s[15] = s[15], s[3], s[7], s[11]

    def gmul(self, a, b):
        p = 0
        for _ in range(8):
            if b & 1:
                p ^= a
            hi = a & 0x80
            a <<= 1
            if hi:
                a ^= 0x1b
            b >>= 1
        return p & 0xFF

    def mix_columns(self, s):
        for c in range(4):
            col = c * 4
            a = s[col:col+4]
            s[col+0] = self.gmul(a[0],2)^self.gmul(a[1],3)^a[2]^a[3]
            s[col+1] = a[0]^self.gmul(a[1],2)^self.gmul(a[2],3)^a[3]
            s[col+2] = a[0]^a[1]^self.gmul(a[2],2)^self.gmul(a[3],3)
            s[col+3] = self.gmul(a[0],3)^a[1]^a[2]^self.gmul(a[3],2)

    def encrypt_block(self, block):
        state = list(block)
        self.add_round_key(state, 0)
        for round in range(1, self.Nr):
            self.sub_bytes(state)
            self.shift_rows(state)
            self.mix_columns(state)
            self.add_round_key(state, round)
        self.sub_bytes(state)
        self.shift_rows(state)
        self.add_round_key(state, self.Nr)
        return state

def generate_random_bytes(length):
    return [random.randint(0, 255) for _ in range(length)]

def xor_blocks(a, b):
    return [x ^ y for x, y in zip(a, b)]

def pad_pkcs7(data):
    pad_len = 16 - (len(data) % 16)
    return data + bytes([pad_len] * pad_len)

def unpad_pkcs7(data):
    pad_len = data[-1]
    if pad_len > 16 or any(p != pad_len for p in data[-pad_len:]):
        return data
    return data[:-pad_len]

def ofb_encrypt_decrypt(aes, input_bytes, iv):
    output = bytearray()
    prev = iv[:]
    for i in range(0, len(input_bytes), 16):
        keystream = aes.encrypt_block(prev)
        block = input_bytes[i:i+16]
        output += bytes(x ^ y for x, y in zip(keystream, block))
        prev = keystream
    return bytes(output)


text = input("Введите текст: ")
data = pad_pkcs7(text.encode('utf-8'))

key = generate_random_bytes(16)
with open("aes_key.bin", "wb") as f:
    f.write(bytes(key))
print("Ключ сгенерирован и сохранён в aes_key.bin: ", end="")
print(" ".join(f"{x:02x}" for x in key))

iv = generate_random_bytes(16)
print("IV: ", " ".join(f"{x:02x}" for x in iv))

aes = AES(key)

encrypted = ofb_encrypt_decrypt(aes, data, iv[:])
print("Зашифрованный текст: ", " ".join(f"{x:02x}" for x in encrypted))

input_hex = input("\nВведите зашифрованную строку для расшифровки: ")
input_bytes = bytes.fromhex(input_hex)
decrypted = ofb_encrypt_decrypt(aes, input_bytes, iv)
decrypted = unpad_pkcs7(decrypted)
print("Расшифрованный текст:", decrypted.decode('utf-8', errors='replace'))
